---
title: "False Confession"
author: "PO Couture"
format: html
editor: visual
---

## False Confession Code

This is all the code I will use to analyze the 2024 data and compare it to the 
2017 data.

```{r}
#| label: Loading the Data and Packages

library(readr)


FC_SMU_Students <- read_csv("FC SMU Students.csv")
View(FC_SMU_Students)

### Removing all the columns and rows with information that I don't need
# Remove the first 7 columns
FC_SMU_Students_cols_removed <- FC_SMU_Students[, -c(1:8)]

# Now, from this new data frame (with columns removed), remove the first 2 rows
FC_SMU_Students_final <- FC_SMU_Students_cols_removed[-c(1:2), ]

# Remove columns 2 through 15
FC_SMU_Students_final <- FC_SMU_Students_final[, -c(2:15)]

FC_SMU_Students <- FC_SMU_Students_final

```

You can add options to executable code like this

```{r}
#| label: Kassin Student Data

# R Script to create a table of means and standard deviations 
# for Kassin et al. (2018) questions from FC_SMU_Students dataset

# Load required packages
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyr)
# Check for additional packages for table formatting
if(!require(flextable)) {
  install.packages("flextable")
  library(flextable)
}
if(!require(officer)) {
  install.packages("officer")
  library(officer)
}

# Function to extract numeric values from responses
# This will handle cases where responses might include text like "1 (Do not agree at all)"

extract_numeric <- function(x) {
  # If x is already numeric, return as is
  if(is.numeric(x)) return(x)
  
  # If x is a factor or character, extract the first number using regex
  if(is.factor(x) || is.character(x)) {
    # Extract the first number from the string
    nums <- as.numeric(gsub("([0-9]+).*", "\\1", x))
    return(nums)
  }
  
  # Return NA if none of the above
  return(NA)
}

# Create vectors to store the question text - you'll need to replace these with your actual question texts
# These are based on what I see in your example tables
kassin_statements <- c(
  "The average person can differentiate between when someone is telling the truth or lying.",
  "Compared to most adults, adolescents exhibit \"immaturity of judgement\" in their decision-making.",
  "If police present a suspect with false evidence during an interrogation, it is more likely that the suspect will confess to a crime they did not commit.",
  "Compared to guilty suspects, innocent suspects are more likely to waive their Charter rights.",
  "In general, people's behaviour is strongly influenced by their expectations of reward and punishment.",
  "Trained police can distinguish between truths and lies at high levels of accuracy.",
  "Sleep deprivation affects decision making and makes a suspect vulnerable to influence.",
  "Explicit promises of leniency or immunity during interrogation can lead a person to confess to a crime that they did not commit.",
  "Police officer expressions of sympathy and moral justification for a crime can lead a suspect to believe that the police will be lenient with them when they confess to a crime.",
  "In decision making, people are influenced more by immediate outcomes than by longer term consequences.",
  "Misinformation about an event can change a person's memory for that event.",
  "Individuals who have intellectual disabilities are particularly vulnerable to the pressures of police.",
  "Observers tend to underestimate the effects of situational factors on the behaviour of other people.",
  "An average adult cannot be induced into giving a false confession.",
  "Individuals with compliant or suggestible personalities are particularly vulnerable to influence during an interrogation.",
  "Compared to adults, adolescents are more likely to give false confessions.",
  "Authority figures can produce illicit acts of obedience from people through a step-by-step process of gradual escalation.",
  "People can be trained to distinguish between truths and lies at high levels of accuracy by observing nonverbal symptoms of anxiety.",
  "People can be trained to distinguish between truths and lies at high levels of accuracy by learning how to detect micro-expressions in the face."
)

# Add the additional statements that are in your second block of questions (Q2_1 to Q2_19)
# If the questions are exactly the same, you can just use the same vector

# Calculate means and SDs for Q1_1 to Q1_19
q1_results <- data.frame(
  Question = paste0("Q1_", 1:19),
  Statement = kassin_statements
)

# Placeholder for Q1 calculations
for(i in 1:19) {
  col_name <- paste0("Q1_", i)
  if(col_name %in% colnames(FC_SMU_Students)) {
    # Extract numeric values and remove NAs for calculations
    numeric_values <- extract_numeric(FC_SMU_Students[[col_name]])
    numeric_values <- numeric_values[!is.na(numeric_values)]
    
    # Only calculate if we have valid numeric values
    if(length(numeric_values) > 0) {
      q1_results$Mean[i] <- round(mean(numeric_values, na.rm = TRUE), 2)
      q1_results$SD[i] <- round(sd(numeric_values, na.rm = TRUE), 2)
      q1_results$N[i] <- length(numeric_values)
    } else {
      q1_results$Mean[i] <- NA
      q1_results$SD[i] <- NA
      q1_results$N[i] <- 0
    }
  } else {
    q1_results$Mean[i] <- NA
    q1_results$SD[i] <- NA
    q1_results$N[i] <- NA
  }
}

# Calculate means and SDs for Q2_1 to Q2_19
q2_results <- data.frame(
  Question = paste0("Q2_", 1:19),
  Statement = kassin_statements  # Assuming the statements are the same
)

# Placeholder for Q2 calculations
for(i in 1:19) {
  col_name <- paste0("Q2_", i)
  if(col_name %in% colnames(FC_SMU_Students)) {
    # Extract numeric values and remove NAs for calculations
    numeric_values <- extract_numeric(FC_SMU_Students[[col_name]])
    numeric_values <- numeric_values[!is.na(numeric_values)]
    
    # Only calculate if we have valid numeric values
    if(length(numeric_values) > 0) {
      q2_results$Mean[i] <- round(mean(numeric_values, na.rm = TRUE), 2)
      q2_results$SD[i] <- round(sd(numeric_values, na.rm = TRUE), 2)
      q2_results$N[i] <- length(numeric_values)
    } else {
      q2_results$Mean[i] <- NA
      q2_results$SD[i] <- NA
      q2_results$N[i] <- 0
    }
  } else {
    q2_results$Mean[i] <- NA
    q2_results$SD[i] <- NA
    q2_results$N[i] <- NA
  }
}

# Combine both tables if needed
all_results <- rbind(q1_results, q2_results)

# Add a note about the scale to the table output
scale_note <- "Scale: 1 = Do not agree at all; 7 = Completely agree"

# Create an APA-style table using flextable (more reliable than papaja for installation)
if(require(flextable) && require(officer)) {
  # Format data for APA table
  apa_table_data <- all_results %>%
    select(Statement, Mean, SD, N)
  
  # Create flextable with APA styling
  ft <- flextable(apa_table_data) %>%
    set_header_labels(
      Statement = "Statement",
      Mean = "M",
      SD = "SD",
      N = "n"
    ) %>%
    italic(j = c("Mean", "SD", "N"), part = "header") %>%
    align(j = 1, align = "left", part = "all") %>%
    align(j = 2:4, align = "right", part = "all") %>%
    add_footer_lines(scale_note) %>%
    set_caption("Table 1. Means and Standard Deviations for Kassin Statements") %>%
    font(fontname = "Times New Roman", part = "all") %>%
    fontsize(size = 12, part = "all") %>%
    line_spacing(space = 1.5) %>%
    border_remove() %>%
    hline_top(part = "header", border = fp_border(width = 0.5)) %>%
    hline_bottom(part = "header", border = fp_border(width = 0.5)) %>%
    hline_bottom(part = "body", border = fp_border(width = 0.5)) %>%
    padding(padding = 5, part = "all") %>%
    autofit()
  
  # Print the table to console
  print(ft)
  
  # Save as Word document
save_as_docx(ft, path = "kassin_apa_table.docx")
}
print(kable(q1_results[, c("Statement", "Mean", "SD", "N")], 
            format = "simple",
            caption = "Means and Standard Deviations for First Set of Kassin Statements"))

cat("\n\n")

print(kable(q2_results[, c("Statement", "Mean", "SD", "N")], 
            format = "simple",
            caption = "Means and Standard Deviations for Second Set of Kassin Statements"))

# Alternative approach: Create a formatted table using kable and kableExtra with APA styling
cat("\nTable: Means and Standard Deviations for Kassin Statements\n")
cat(scale_note, "\n\n")

if(require(kableExtra)) {
  # Create an APA-styled table with kableExtra
  apa_styled_table <- kable(all_results[, c("Statement", "Mean", "SD", "N")], 
                         format = "html",
                         caption = "Table 1. Means and Standard Deviations for Kassin Statements",
                         col.names = c("Statement", "*M*", "*SD*", "*n*"),
                         align = c("l", "r", "r", "r")) %>%
    kable_styling(bootstrap_options = c("striped", "hover"),
                  full_width = FALSE) %>%
    row_spec(0, bold = TRUE) %>%
    footnote(general = scale_note,
             general_title = "",
             footnote_as_chunk = TRUE,
             escape = FALSE) %>%
    add_header_above(c(" " = 1, "Statistics" = 3))
  
  # Save the table as an HTML file that could be imported into Word
write_file <- function(x) {cat(x, file = "Leo_&_Liu_apa_styled_table.html")}
write_file(as.character(apa_styled_table))
  
  # Print the table
  print(apa_styled_table)
}

# For use with APA articles, here's how to create a CSV that can be imported into Word
write.csv(all_results[, c("Statement", "Mean", "SD", "N")], "Leo_&_Liu_results.csv", row.names = FALSE)

# If you want to recreate exactly the format from your example tables,
# you could add columns for the Kassin et al. (2018) corresponding statements
# and the Common Sense percentages if you have that data available
```

```{r}
#| label: Leo & Liu Student Data

# R Script to create APA-formatted tables for Leo's Interrogation Tactics data
# from FC_SMU_Students dataset (Q3 - Coerciveness, Q4 - True Confession, Q5 - False Confession)

# Load required packages
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyr)
# Check for additional packages for table formatting
if(!require(flextable)) {
  install.packages("flextable")
  library(flextable)
}
if(!require(officer)) {
  install.packages("officer")
  library(officer)
}

# Function to extract numeric values from responses
# This will handle cases where responses might include text like "1 (Not at all coercive)"
extract_numeric <- function(x) {
  # If x is already numeric, return as is
  if(is.numeric(x)) return(x)
  
  # If x is a factor or character, extract the first number using regex
  if(is.factor(x) || is.character(x)) {
    # Extract the first number from the string
    nums <- as.numeric(gsub("([0-9]+).*", "\\1", x))
    return(nums)
  }
  
  # Return NA if none of the above
  return(NA)
}

# Create empty data frames to store results for each question set
coerciveness_results <- data.frame(
  Question = paste0("Q3 - Coerciveness_", 1:18),
  Statement = rep(NA, 18),
  Mean = rep(NA, 18),
  SD = rep(NA, 18),
  N = rep(NA, 18)
)

true_confession_results <- data.frame(
  Question = paste0("Q4 - True Confession_", 1:18),
  Statement = rep(NA, 18),
  Mean = rep(NA, 18),
  SD = rep(NA, 18),
  N = rep(NA, 18)
)

false_confession_results <- data.frame(
  Question = paste0("Q5 False Confess._", 1:18),
  Statement = rep(NA, 18),
  Mean = rep(NA, 18),
  SD = rep(NA, 18),
  N = rep(NA, 18)
)

# Updated statements based on Leo's actual interrogation tactics
leo_liu_statements <- c(
  "Repeatedly accusing a suspect.",
  "Asking the suspect to take a lie detector test.",
  "Repeatedly telling the suspect his or her alibi is false.",
  "Repeatedly cutting off suspect's denial of guilt.",
  "Giving a lie detector test and truthfully telling suspect results are inconclusive.",
  "Giving a lie detector test and truthfully telling suspect results show he or she is lying.",
  "Confronting suspect with incriminating false surveillance camera evidence.",
  "Confronting suspect with incriminating false DNA evidence.",
  "Confronting suspect with incriminating false fingerprint evidence.",
  "Giving a lie detector test and falsely telling suspect results show he or she is lying.",
  "Implicitly suggesting suspect will receive a lenient charge for confession.",
  "Explicitly promising suspect a lenient charge for confession.",
  "Implicitly suggesting suspect will receive a lenient sentence for confession.",
  "Explicitly promising a suspect a lenient sentence for confession.",
  "Implicitly threatening the suspect with physical harm if no confession.",
  "Explicitly threatening the suspect with physical harm if no confession.",
  "Threatening the suspect with violence if no confession.",
  "Beating or assaulting the suspect."
)

# Calculate means and SDs for Q3 - Coerciveness
for(i in 1:18) {
  # Create column name as it appears in the dataset
  col_name <- paste0("Q3 - Coerciveness_", i)
  
  # Set statement text
  coerciveness_results$Statement[i] <- leo_liu_statements[i]
  
  # Check if column exists in dataset
  if(col_name %in% colnames(FC_SMU_Students)) {
    # Extract numeric values and remove NAs for calculations
    numeric_values <- extract_numeric(FC_SMU_Students[[col_name]])
    numeric_values <- numeric_values[!is.na(numeric_values)]
    
    # Only calculate if we have valid numeric values
    if(length(numeric_values) > 0) {
      coerciveness_results$Mean[i] <- round(mean(numeric_values, na.rm = TRUE), 2)
      coerciveness_results$SD[i] <- round(sd(numeric_values, na.rm = TRUE), 2)
      coerciveness_results$N[i] <- length(numeric_values)
    } else {
      coerciveness_results$Mean[i] <- NA
      coerciveness_results$SD[i] <- NA
      coerciveness_results$N[i] <- 0
    }
  }
}

# Calculate means and SDs for Q4 - True Confession
for(i in 1:18) {
  # Create column name as it appears in the dataset
  col_name <- paste0("Q4 - True Confession_", i)
  
  # Set statement text
  true_confession_results$Statement[i] <- leo_liu_statements[i]
  
  # Check if column exists in dataset
  if(col_name %in% colnames(FC_SMU_Students)) {
    # Extract numeric values and remove NAs for calculations
    numeric_values <- extract_numeric(FC_SMU_Students[[col_name]])
    numeric_values <- numeric_values[!is.na(numeric_values)]
    
    # Only calculate if we have valid numeric values
    if(length(numeric_values) > 0) {
      true_confession_results$Mean[i] <- round(mean(numeric_values, na.rm = TRUE), 2)
      true_confession_results$SD[i] <- round(sd(numeric_values, na.rm = TRUE), 2)
      true_confession_results$N[i] <- length(numeric_values)
    } else {
      true_confession_results$Mean[i] <- NA
      true_confession_results$SD[i] <- NA
      true_confession_results$N[i] <- 0
    }
  }
}

# Calculate means and SDs for Q5 - False Confession
for(i in 1:18) {
  # Create column name as it appears in the dataset
  col_name <- paste0("Q5 False Confess._", i)
  
  # Set statement text
  false_confession_results$Statement[i] <- leo_liu_statements[i]
  
  # Check if column exists in dataset
  if(col_name %in% colnames(FC_SMU_Students)) {
    # Extract numeric values and remove NAs for calculations
    numeric_values <- extract_numeric(FC_SMU_Students[[col_name]])
    numeric_values <- numeric_values[!is.na(numeric_values)]
    
    # Only calculate if we have valid numeric values
    if(length(numeric_values) > 0) {
      false_confession_results$Mean[i] <- round(mean(numeric_values, na.rm = TRUE), 2)
      false_confession_results$SD[i] <- round(sd(numeric_values, na.rm = TRUE), 2)
      false_confession_results$N[i] <- length(numeric_values)
    } else {
      false_confession_results$Mean[i] <- NA
      false_confession_results$SD[i] <- NA
      false_confession_results$N[i] <- 0
    }
  }
}

# Combine all results for potential combined table
all_leo_liu_results <- rbind(
  coerciveness_results,
  true_confession_results,
  false_confession_results
)

# Add category column to distinguish between the three question types
all_leo_liu_results$Category <- c(
  rep("Coerciveness", 18),
  rep("True Confession", 18),
  rep("False Confession", 18)
)

# Create an alternate version that groups by statement rather than by category
# This format may be more useful for comparisons between categories
grouped_by_statement <- data.frame(
  Statement = leo_liu_statements,
  Coerciveness_Mean = coerciveness_results$Mean,
  Coerciveness_SD = coerciveness_results$SD,
  True_Confession_Mean = true_confession_results$Mean,
  True_Confession_SD = true_confession_results$SD,
  False_Confession_Mean = false_confession_results$Mean,
  False_Confession_SD = false_confession_results$SD
)

# Updated scale notes based on the table you provided
coerciveness_scale_note <- "Scale: 1 = Not coercive at all; 5 = Extremely coercive"
true_confession_scale_note <- "Scale: 1 = Not at all likely; 5 = Extremely likely"
false_confession_scale_note <- "Scale: 1 = Not at all likely; 5 = Extremely likely"

# Create APA-style tables using flextable

# Table 1: Coerciveness
if(require(flextable)) {
  # Format data for APA table
  coerciveness_table_data <- coerciveness_results %>%
    select(Statement, Mean, SD, N)
  
  # Create flextable with APA styling
  coerciveness_ft <- flextable(coerciveness_table_data) %>%
    set_header_labels(
      Statement = "Interrogation Tactic",
      Mean = "M",
      SD = "SD",
      N = "n"
    ) %>%
    italic(j = c("Mean", "SD", "N"), part = "header") %>%
    align(j = 1, align = "left", part = "all") %>%
    align(j = 2:4, align = "right", part = "all") %>%
    add_footer_lines(coerciveness_scale_note) %>%
    set_caption("Table 1. Perceived Coerciveness of Interrogation Tactics") %>%
    font(fontname = "Times New Roman", part = "all") %>%
    fontsize(size = 12, part = "all") %>%
    line_spacing(space = 1.5) %>%
    border_remove() %>%
    hline_top(part = "header", border = fp_border(width = 0.5)) %>%
    hline_bottom(part = "header", border = fp_border(width = 0.5)) %>%
    hline_bottom(part = "body", border = fp_border(width = 0.5)) %>%
    padding(padding = 5, part = "all") %>%
    autofit()
  
  # Print the table to console
  print(coerciveness_ft)
  
  # Save as Word document
  save_as_docx(coerciveness_ft, path = "coerciveness_apa_table.docx")
}

# Table 2: True Confession
if(require(flextable)) {
  # Format data for APA table
  true_confession_table_data <- true_confession_results %>%
    select(Statement, Mean, SD, N)
  
  # Create flextable with APA styling
  true_confession_ft <- flextable(true_confession_table_data) %>%
    set_header_labels(
      Statement = "Interrogation Tactic",
      Mean = "M",
      SD = "SD",
      N = "n"
    ) %>%
    italic(j = c("Mean", "SD", "N"), part = "header") %>%
    align(j = 1, align = "left", part = "all") %>%
    align(j = 2:4, align = "right", part = "all") %>%
    add_footer_lines(true_confession_scale_note) %>%
    set_caption("Table 2. Perceived Likelihood of Techniques Leading to True Confessions") %>%
    font(fontname = "Times New Roman", part = "all") %>%
    fontsize(size = 12, part = "all") %>%
    line_spacing(space = 1.5) %>%
    border_remove() %>%
    hline_top(part = "header", border = fp_border(width = 0.5)) %>%
    hline_bottom(part = "header", border = fp_border(width = 0.5)) %>%
    hline_bottom(part = "body", border = fp_border(width = 0.5)) %>%
    padding(padding = 5, part = "all") %>%
    autofit()
  
  # Print the table to console
  print(true_confession_ft)
  
  # Save as Word document
  save_as_docx(true_confession_ft, path = "true_confession_apa_table.docx")
}

# Table 3: False Confession
if(require(flextable)) {
  # Format data for APA table
  false_confession_table_data <- false_confession_results %>%
    select(Statement, Mean, SD, N)
  
  # Create flextable with APA styling
  false_confession_ft <- flextable(false_confession_table_data) %>%
    set_header_labels(
      Statement = "Interrogation Tactic",
      Mean = "M",
      SD = "SD",
      N = "n"
    ) %>%
    italic(j = c("Mean", "SD", "N"), part = "header") %>%
    align(j = 1, align = "left", part = "all") %>%
    align(j = 2:4, align = "right", part = "all") %>%
    add_footer_lines(false_confession_scale_note) %>%
    set_caption("Table 3. Perceived Likelihood of Techniques Leading to False Confessions") %>%
    font(fontname = "Times New Roman", part = "all") %>%
    fontsize(size = 12, part = "all") %>%
    line_spacing(space = 1.5) %>%
    border_remove() %>%
    hline_top(part = "header", border = fp_border(width = 0.5)) %>%
    hline_bottom(part = "header", border = fp_border(width = 0.5)) %>%
    hline_bottom(part = "body", border = fp_border(width = 0.5)) %>%
    padding(padding = 5, part = "all") %>%
    autofit()
  
  # Print the table to console
  print(false_confession_ft)
  
  # Save as Word document
  save_as_docx(false_confession_ft, path = "false_confession_apa_table.docx")
}

# Table 4: Combined comparison table (similar to Leo's table format)
if(require(flextable)) {
  # Format data for combined table matching Leo's format
  leo_table_data <- data.frame(
    Tactic = leo_liu_statements,
    Coerciveness = paste0(coerciveness_results$Mean, "(", coerciveness_results$SD, ")"),
    TrueConfession = paste0(true_confession_results$Mean, "(", true_confession_results$SD, ")"),
    FalseConfession = paste0(false_confession_results$Mean, "(", false_confession_results$SD, ")")
  )
  
  # Create flextable with APA styling
  leo_ft <- flextable(leo_table_data) %>%
    set_header_labels(
      Tactic = "Interrogation Tactic",
      Coerciveness = "Coerciveness",
      TrueConfession = "Likelihood of Eliciting a True Confession",
      FalseConfession = "Likelihood of Eliciting a False Confession"
    ) %>%
    add_header_row(
      values = c("", "Mean(SD)", "Mean(SD)", "Mean(SD)"),
      colwidths = c(1, 1, 1, 1)
    ) %>%
    align(j = 1, align = "left", part = "all") %>%
    align(j = 2:4, align = "center", part = "all") %>%
    add_footer_lines(c(
      coerciveness_scale_note,
      true_confession_scale_note,
      false_confession_scale_note
    )) %>%
    set_caption("Table X. Mean scores and standard deviations for interrogation tactics on the coerciveness and likelihood of a true or false confession") %>%
    font(fontname = "Times New Roman", part = "all") %>%
    fontsize(size = 12, part = "all") %>%
    line_spacing(space = 1.5) %>%
    border_remove() %>%
    border(i = 1:18, border.top = fp_border(width = 0.5), border.bottom = fp_border(width = 0.5), part = "body") %>%
    hline_top(part = "header", border = fp_border(width = 0.5)) %>%
    hline_bottom(part = "header", border = fp_border(width = 0.5)) %>%
    padding(padding = 5, part = "all") %>%
    autofit()
  
  # Add superscript notation for scale references
  leo_ft <- leo_ft %>%
    compose(
      i = 1, j = 2,
      value = as_paragraph(leo_table_data$Coerciveness[1], as_sup("a"))
    ) %>%
    compose(
      i = 1, j = 3,
      value = as_paragraph(leo_table_data$TrueConfession[1], as_sup("b"))
    ) %>%
    compose(
      i = 1, j = 4,
      value = as_paragraph(leo_table_data$FalseConfession[1], as_sup("c"))
    )
  
  # Print the table to console
  print(leo_ft)
  
  # Save as Word document
  save_as_docx(leo_ft, path = "leo_interrogation_tactics_table.docx")
}

# Save all tables to a single Word document
if(require(flextable) && require(officer)) {
  # Create Word document with all tables
   doc <- read_docx()
   doc <- body_add_flextable(doc, coerciveness_ft)
   doc <- body_add_break(doc)
   doc <- body_add_flextable(doc, true_confession_ft)
   doc <- body_add_break(doc)
   doc <- body_add_flextable(doc, false_confession_ft)
   doc <- body_add_break(doc)
   doc <- body_add_flextable(doc, leo_ft)
   print(doc, target = "leo_interrogation_tactics_all_tables.docx")
}

# Export results to CSV files for additional analyses
# write.csv(coerciveness_results, "coerciveness_results.csv", row.names = FALSE)
# write.csv(true_confession_results, "true_confession_results.csv", row.names = FALSE)
# write.csv(false_confession_results, "false_confession_results.csv", row.names = FALSE)
# write.csv(leo_table_data, "leo_interrogation_tactics_comparison.csv", row.names = FALSE)

```

## Panel Data

```{r}

library(readr)


FC_Panel_Data <- read_csv("FC Panel Data.csv")
View(FC_Panel_Data)

FC_Panel_Data <- FC_Panel_Data[-c(1:2), -c(1:19)]

```

```{r}
#| label: Kassin et al., 2018 Panel Data

# R Script to create a table of means and standard deviations
# for Kassin et al. (2018) questions from FC_Panel_Data dataset

# Load required packages
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyr)
# Check for additional packages for table formatting
if(!require(flextable)) {
  install.packages("flextable")
  library(flextable)
}
if(!require(officer)) {
  install.packages("officer")
  library(officer)
}

# Function to extract numeric values from responses
# This will handle cases where responses might include text like "1 (Do not agree at all)"

extract_numeric <- function(x) {
  # If x is already numeric, return as is
  if(is.numeric(x)) return(x)

  # If x is a factor or character, extract the first number using regex
  if(is.factor(x) || is.character(x)) {
    # Extract the first number from the string
    nums <- as.numeric(gsub("([0-9]+).*", "\\1", x))
    return(nums)
  }

  # Return NA if none of the above
  return(NA)
}

# Create vectors to store the question text - you'll need to replace these with your actual question texts
# These are based on what I see in your example tables
kassin_statements <- c(
  "The average person can differentiate between when someone is telling the truth or lying.",
  "Compared to most adults, adolescents exhibit \"immaturity of judgement\" in their decision-making.",
  "If police present a suspect with false evidence during an interrogation, it is more likely that the suspect will confess to a crime they did not commit.",
  "Compared to guilty suspects, innocent suspects are more likely to waive their Charter rights.",
  "In general, people's behaviour is strongly influenced by their expectations of reward and punishment.",
  "Trained police can distinguish between truths and lies at high levels of accuracy.",
  "Sleep deprivation affects decision making and makes a suspect vulnerable to influence.",
  "Explicit promises of leniency or immunity during interrogation can lead a person to confess to a crime that they did not commit.",
  "Police officer expressions of sympathy and moral justification for a crime can lead a suspect to believe that the police will be lenient with them when they confess to a crime.",
  "In decision making, people are influenced more by immediate outcomes than by longer term consequences.",
  "Misinformation about an event can change a person's memory for that event.",
  "Individuals who have intellectual disabilities are particularly vulnerable to the pressures of police.",
  "Observers tend to underestimate the effects of situational factors on the behaviour of other people.",
  "An average adult cannot be induced into giving a false confession.",
  "Individuals with compliant or suggestible personalities are particularly vulnerable to influence during an interrogation.",
  "Compared to adults, adolescents are more likely to give false confessions.",
  "Authority figures can produce illicit acts of obedience from people through a step-by-step process of gradual escalation.",
  "People can be trained to distinguish between truths and lies at high levels of accuracy by observing nonverbal symptoms of anxiety.",
  "People can be trained to distinguish between truths and lies at high levels of accuracy by learning how to detect micro-expressions in the face."
)

# Calculate means and SDs for Q1_1 to Q1_19
q1_results <- data.frame(
  Question = paste0("Q1_", 1:19),
  Statement = kassin_statements
)

# Placeholder for Q1 calculations
for(i in 1:19) {
  col_name <- paste0("Q1_", i)
  if(col_name %in% colnames(FC_Panel_Data)) {
    # Extract numeric values and remove NAs for calculations
    numeric_values <- extract_numeric(FC_Panel_Data[[col_name]])
    numeric_values <- numeric_values[!is.na(numeric_values)]

    # Only calculate if we have valid numeric values
    if(length(numeric_values) > 0) {
      q1_results$Mean[i] <- round(mean(numeric_values, na.rm = TRUE), 2)
      q1_results$SD[i] <- round(sd(numeric_values, na.rm = TRUE), 2)
      q1_results$N[i] <- length(numeric_values)
    } else {
      q1_results$Mean[i] <- NA
      q1_results$SD[i] <- NA
      q1_results$N[i] <- 0
    }
  } else {
    q1_results$Mean[i] <- NA
    q1_results$SD[i] <- NA
    q1_results$N[i] <- NA
  }
}

# Calculate means and SDs for Q2_1 to Q2_19
q2_results <- data.frame(
  Question = paste0("Q2_", 1:19),
  Statement = kassin_statements  # Assuming the statements are the same
)

# Placeholder for Q2 calculations
for(i in 1:19) {
  col_name <- paste0("Q2_", i)
  if(col_name %in% colnames(FC_Panel_Data)) {
    # Extract numeric values and remove NAs for calculations
    numeric_values <- extract_numeric(FC_Panel_Data[[col_name]])
    numeric_values <- numeric_values[!is.na(numeric_values)]

    # Only calculate if we have valid numeric values
    if(length(numeric_values) > 0) {
      q2_results$Mean[i] <- round(mean(numeric_values, na.rm = TRUE), 2)
      q2_results$SD[i] <- round(sd(numeric_values, na.rm = TRUE), 2)
      q2_results$N[i] <- length(numeric_values)
    } else {
      q2_results$Mean[i] <- NA
      q2_results$SD[i] <- NA
      q2_results$N[i] <- 0
    }
  } else {
    q2_results$Mean[i] <- NA
    q2_results$SD[i] <- NA
    q2_results$N[i] <- NA
  }
}

# Combine both tables if needed
all_results <- rbind(q1_results, q2_results)

# Add a note about the scale to the table output
scale_note <- "Scale: 1 = Do not agree at all; 7 = Completely agree"

# Create an APA-style table using flextable (more reliable than papaja for installation)
if(require(flextable) && require(officer)) {
  # Format data for APA table
  apa_table_data <- all_results %>%
    select(Statement, Mean, SD, N)

  # Create flextable with APA styling
  ft <- flextable(apa_table_data) %>%
    set_header_labels(
      Statement = "Statement",
      Mean = "M",
      SD = "SD",
      N = "n"
    ) %>%
    italic(j = c("Mean", "SD", "N"), part = "header") %>%
    align(j = 1, align = "left", part = "all") %>%
    align(j = 2:4, align = "right", part = "all") %>%
    add_footer_lines(scale_note) %>%
    set_caption("Table 1. Means and Standard Deviations for Kassin Statements") %>%
    font(fontname = "Times New Roman", part = "all") %>%
    fontsize(size = 12, part = "all") %>%
    line_spacing(space = 1.5) %>%
    border_remove() %>%
    hline_top(part = "header", border = fp_border(width = 0.5)) %>%
    hline_bottom(part = "header", border = fp_border(width = 0.5)) %>%
    hline_bottom(part = "body", border = fp_border(width = 0.5)) %>%
    padding(padding = 5, part = "all") %>%
    autofit()

  # Print the table to console
  print(ft)

  # Save as Word document
  save_as_docx(ft, path = "kassin_apa_table.docx")
}
print(kable(q1_results[, c("Statement", "Mean", "SD", "N")],
            format = "simple",
            caption = "Means and Standard Deviations for First Set of Kassin Statements"))

cat("\n\n")

print(kable(q2_results[, c("Statement", "Mean", "SD", "N")],
            format = "simple",
            caption = "Means and Standard Deviations for Second Set of Kassin Statements"))

# Alternative approach: Create a formatted table using kable and kableExtra with APA styling
cat("\nTable: Means and Standard Deviations for Kassin Statements\n")
cat(scale_note, "\n\n")

if(require(kableExtra)) {
  # Create an APA-styled table with kableExtra
  apa_styled_table <- kable(all_results[, c("Statement", "Mean", "SD", "N")],
                            format = "html",
                            caption = "Table 1. Means and Standard Deviations for Kassin Statements",
                            col.names = c("Statement", "*M*", "*SD*", "*n*"),
                            align = c("l", "r", "r", "r")) %>%
    kable_styling(bootstrap_options = c("striped", "hover"),
                  full_width = FALSE) %>%
    row_spec(0, bold = TRUE) %>%
    footnote(general = scale_note,
              general_title = "",
              footnote_as_chunk = TRUE,
              escape = FALSE) %>%
    add_header_above(c(" " = 1, "Statistics" = 3))

  # Save the table as an HTML file that could be imported into Word
  write_file <- function(x) {cat(x, file = "Leo_&_Liu_apa_styled_table.html")}
  write_file(as.character(apa_styled_table))

  # Print the table
  print(apa_styled_table)
}

# For use with APA articles, here's how to create a CSV that can be imported into Word
write.csv(all_results[, c("Statement", "Mean", "SD", "N")], "Kassin_Panel_results.csv", row.names = FALSE)

# If you want to recreate exactly the format from your example tables,
# you could add columns for the Kassin et al. (2018) corresponding statements
# and the Common Sense percentages if you have that data available

```

```{r}
#|label: Leo & Liu Panel Data

# R Script to create APA-formatted tables for Leo's Interrogation Tactics data
# from FC_Panel_Data dataset (Q3 - Coerciveness, Q4 - True Confession, Q5 - False Confession)

library(dplyr)
library(knitr)
library(kableExtra)
library(tidyr)
if(!require(flextable)) {
  install.packages("flextable")
  library(flextable)
}
if(!require(officer)) {
  install.packages("officer")
  library(officer)
}

extract_numeric <- function(x) {
  if(is.numeric(x)) return(x)
  if(is.factor(x) || is.character(x)) {
    nums <- as.numeric(gsub("([0-9]+).*", "\\1", x))
    return(nums)
  }
  return(NA)
}

coerciveness_results <- data.frame(
  Question = paste0("Q3 - Coerciveness_", 1:18),
  Statement = rep(NA, 18),
  Mean = rep(NA, 18),
  SD = rep(NA, 18),
  N = rep(NA, 18)
)

true_confession_results <- data.frame(
  Question = paste0("Q4 - True Confession_", 1:18),
  Statement = rep(NA, 18),
  Mean = rep(NA, 18),
  SD = rep(NA, 18),
  N = rep(NA, 18)
)

false_confession_results <- data.frame(
  Question = paste0("Q5 - False Confess._", 1:18),
  Statement = rep(NA, 18),
  Mean = rep(NA, 18),
  SD = rep(NA, 18),
  N = rep(NA, 18)
)

leo_liu_statements <- c(
  "Repeatedly accusing a suspect.",
  "Asking the suspect to take a lie detector test.",
  "Repeatedly telling the suspect his or her alibi is false.",
  "Repeatedly cutting off suspect's denial of guilt.",
  "Giving a lie detector test and truthfully telling suspect results are inconclusive.",
  "Giving a lie detector test and truthfully telling suspect results show he or she is lying.",
  "Confronting suspect with incriminating false surveillance camera evidence.",
  "Confronting suspect with incriminating false DNA evidence.",
  "Confronting suspect with incriminating false fingerprint evidence.",
  "Giving a lie detector test and falsely telling suspect results show he or she is lying.",
  "Implicitly suggesting suspect will receive a lenient charge for confession.",
  "Explicitly promising suspect a lenient charge for confession.",
  "Implicitly suggesting suspect will receive a lenient sentence for confession.",
  "Explicitly promising a suspect a lenient sentence for confession.",
  "Implicitly threatening the suspect with physical harm if no confession.",
  "Explicitly threatening the suspect with physical harm if no confession.",
  "Threatening the suspect with violence if no confession.",
  "Beating or assaulting the suspect."
)

for(i in 1:18) {
  col_name <- paste0("Q3 - Coerciveness_", i)
  coerciveness_results$Statement[i] <- leo_liu_statements[i]
  if(col_name %in% colnames(FC_Panel_Data)) {
    numeric_values <- extract_numeric(FC_Panel_Data[[col_name]])
    numeric_values <- numeric_values[!is.na(numeric_values)]
    if(length(numeric_values) > 0) {
      coerciveness_results$Mean[i] <- round(mean(numeric_values, na.rm = TRUE), 2)
      coerciveness_results$SD[i] <- round(sd(numeric_values, na.rm = TRUE), 2)
      coerciveness_results$N[i] <- length(numeric_values)
    } else {
      coerciveness_results$Mean[i] <- NA
      coerciveness_results$SD[i] <- NA
      coerciveness_results$N[i] <- 0
    }
  }
}

for(i in 1:18) {
  col_name <- paste0("Q4 - True Confession_", i)
  true_confession_results$Statement[i] <- leo_liu_statements[i]
  if(col_name %in% colnames(FC_Panel_Data)) {
    numeric_values <- extract_numeric(FC_Panel_Data[[col_name]])
    numeric_values <- numeric_values[!is.na(numeric_values)]
    if(length(numeric_values) > 0) {
      true_confession_results$Mean[i] <- round(mean(numeric_values, na.rm = TRUE), 2)
      true_confession_results$SD[i] <- round(sd(numeric_values, na.rm = TRUE), 2)
      true_confession_results$N[i] <- length(numeric_values)
    } else {
      true_confession_results$Mean[i] <- NA
      true_confession_results$SD[i] <- NA
      true_confession_results$N[i] <- 0
    }
  }
}

for(i in 1:18) {
  col_name <- paste0("Q5 - False Confess._", i)
  false_confession_results$Statement[i] <- leo_liu_statements[i]
  if(col_name %in% colnames(FC_Panel_Data)) {
    numeric_values <- extract_numeric(FC_Panel_Data[[col_name]])
    numeric_values <- numeric_values[!is.na(numeric_values)]
    if(length(numeric_values) > 0) {
      false_confession_results$Mean[i] <- round(mean(numeric_values, na.rm = TRUE), 2)
      false_confession_results$SD[i] <- round(sd(numeric_values, na.rm = TRUE), 2)
      false_confession_results$N[i] <- length(numeric_values)
    } else {
      false_confession_results$Mean[i] <- NA
      false_confession_results$SD[i] <- NA
      false_confession_results$N[i] <- 0
    }
  }
}

all_leo_liu_results <- rbind(
  coerciveness_results,
  true_confession_results,
  false_confession_results
)

all_leo_liu_results$Category <- c(
  rep("Coerciveness", 18),
  rep("True Confession", 18),
  rep("False Confession", 18)
)

grouped_by_statement <- data.frame(
  Statement = leo_liu_statements,
  Coerciveness_Mean = coerciveness_results$Mean,
  Coerciveness_SD = coerciveness_results$SD,
  True_Confession_Mean = true_confession_results$Mean,
  True_Confession_SD = true_confession_results$SD,
  False_Confession_Mean = false_confession_results$Mean,
  False_Confession_SD = false_confession_results$SD
)

coerciveness_scale_note <- "Scale: 1 = Not coercive at all; 5 = Extremely coercive"
true_confession_scale_note <- "Scale: 1 = Not at all likely; 5 = Extremely likely"
false_confession_scale_note <- "Scale: 1 = Not at all likely; 5 = Extremely likely"

if(require(flextable)) {
  coerciveness_table_data <- coerciveness_results %>%
    select(Statement, Mean, SD, N)
  coerciveness_ft <- flextable(coerciveness_table_data) %>%
    set_header_labels(
      Statement = "Interrogation Tactic",
      Mean = "M",
      SD = "SD",
      N = "n"
    ) %>%
    italic(j = c("Mean", "SD", "N"), part = "header") %>%
    align(j = 1, align = "left", part = "all") %>%
    align(j = 2:4, align = "center", part = "all") %>%
    fontsize(size = 11, part = "all") %>%
    autofit() %>%
    add_footer_lines(coerciveness_scale_note)
  print(coerciveness_ft)
}

if(require(flextable)) {
  true_confession_table_data <- true_confession_results %>%
    select(Statement, Mean, SD, N)
  true_confession_ft <- flextable(true_confession_table_data) %>%
    set_header_labels(
      Statement = "Interrogation Tactic",
      Mean = "M",
      SD = "SD",
      N = "n"
    ) %>%
    italic(j = c("Mean", "SD", "N"), part = "header") %>%
    align(j = 1, align = "left", part = "all") %>%
    align(j = 2:4, align = "center", part = "all") %>%
    fontsize(size = 11, part = "all") %>%
    autofit() %>%
    add_footer_lines(true_confession_scale_note)
  print(true_confession_ft)
}

if(require(flextable)) {
  false_confession_table_data <- false_confession_results %>%
    select(Statement, Mean, SD, N)
  false_confession_ft <- flextable(false_confession_table_data) %>%
    set_header_labels(
      Statement = "Interrogation Tactic",
      Mean = "M",
      SD = "SD",
      N = "n"
    ) %>%
    italic(j = c("Mean", "SD", "N"), part = "header") %>%
    align(j = 1, align = "left", part = "all") %>%
    align(j = 2:4, align = "center", part = "all") %>%
    fontsize(size = 11, part = "all") %>%
    autofit() %>%
    add_footer_lines(false_confession_scale_note)
  print(false_confession_ft)
}

doc <- read_docx()
doc <- body_add_par(doc, "Table 1: Perceived Coerciveness of Leo's Interrogation Tactics", style = "heading 2")
doc <- body_add_flextable(doc, coerciveness_ft)
doc <- body_add_par(doc, "")
doc <- body_add_par(doc, "Table 2: Likelihood of True Confession for Leo's Interrogation Tactics", style = "heading 2")
doc <- body_add_flextable(doc, true_confession_ft)
doc <- body_add_par(doc, "")
doc <- body_add_par(doc, "Table 3: Likelihood of False Confession for Leo's Interrogation Tactics", style = "heading 2")
doc <- body_add_flextable(doc, false_confession_ft)
print(doc, target = "Leo_Interrogation_Tactics_APA_Tables.docx")

```






The `echo: false` option disables the printing of code (only output is displayed).
